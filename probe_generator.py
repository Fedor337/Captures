import argparse
from pathlib import Path
from typing import List, Set
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord


class ProbeGenerator:
    def __init__(self, input_fasta: str, output_fasta: str, probe_length: int, step: int):
        self.input_fasta = Path(input_fasta)
        self.output_fasta = Path(output_fasta)
        self.probe_length = probe_length
        self.step = step

        if not self.input_fasta.exists():
            raise FileNotFoundError(f"[–û—à–∏–±–∫–∞] –§–∞–π–ª {self.input_fasta} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def make_probes(self, sequence: str, exon_id: str) -> List[SeqRecord]:
        probes = []
        for i in range(0, len(sequence) - self.probe_length + 1, self.step):
            probe_seq = sequence[i:i + self.probe_length]
            probe_id = f"{exon_id}_probe_{i+1}_{i + self.probe_length}"
            probes.append(SeqRecord(Seq(probe_seq), id=probe_id, description=""))
        return probes

    def generate_all(self):
        print(f"[üîç] –ß—Ç–µ–Ω–∏–µ FASTA: {self.input_fasta}")
        total_input = 0
        total_output = 0
        unique_sequences: Set[str] = set()
        all_probes: List[SeqRecord] = []

        for record in SeqIO.parse(self.input_fasta, "fasta"):
            total_input += 1
            exon_id = record.id
            sequence = str(record.seq).upper()

            if len(sequence) < self.probe_length:
                continue

            probes = self.make_probes(sequence, exon_id)
            for probe in probes:
                probe_seq_str = str(probe.seq)
                if probe_seq_str not in unique_sequences:
                    unique_sequences.add(probe_seq_str)
                    all_probes.append(probe)
                    total_output += 1

        if total_output == 0:
            print("[‚ö†] –ù–∏ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–Ω–¥–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        else:
            SeqIO.write(all_probes, self.output_fasta, "fasta")
            print(f"[‚úÖ] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_output} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–¥–æ–≤.")
            print(f"[üíæ] –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª: {self.output_fasta}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not self.output_fasta.exists():
            print("[‚ùå] –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–æ–Ω–¥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        else:
            print(f"[üìÑ] –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {self.output_fasta.resolve()}")


def main():
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–¥–æ–≤ –∏–∑ FASTA-—Ñ–∞–π–ª–∞")
    parser.add_argument("input_fasta", help="–í—Ö–æ–¥–Ω–æ–π FASTA-—Ñ–∞–π–ª —Å —ç–∫–∑–æ–Ω–∞–º–∏")
    parser.add_argument("output_fasta", help="–í—ã—Ö–æ–¥–Ω–æ–π FASTA-—Ñ–∞–π–ª –¥–ª—è –∑–æ–Ω–¥–æ–≤")
    parser.add_argument("--probe-length", type=int, default=120, help="–î–ª–∏–Ω–∞ –∑–æ–Ω–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 120)")
    parser.add_argument("--step", type=int, default=1, help="–®–∞–≥ –º–µ–∂–¥—É –∑–æ–Ω–¥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")

    args = parser.parse_args()

    generator = ProbeGenerator(
        input_fasta=args.input_fasta,
        output_fasta=args.output_fasta,
        probe_length=args.probe_length,
        step=args.step
    )
    generator.generate_all()


if __name__ == "__main__":
    main()





